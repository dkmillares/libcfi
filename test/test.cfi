/*
 * This file is completely free, public domain software.
 */


# ******************************************************************************
#
# FILE NAME
#
#	$RCSfile:$
#	$Revision:$
#	$Date:$
#
# PROGRAM INFORMATION
#
#	Developed by:	libcfi project
#	Developer:	Douglas Jerome, drj, <douglas@backstep.org>
#
# FILE DESCRIPTION
#
#	This is a test and demonstration file illustrating the CFI syntax.
#
# CHANGE LOG
#
#	26jul05	drj	Updated for libcfi-1.0.0)
#	20jun00	drj	Updated for libcfi2 (libcfi-0.35.0)
#	26sep99	drj	File generation.
#
# ******************************************************************************


# These are the various forms of CFI comments:
# -------------------------------------------
#
# You've already seen this line comment; it begins with a `#'.
-- Here is a line comment from Ada syntax; it begins with a `--'.
// And here is a line comment from C++ syntax; it begins with `//'.
/* Block comments are from C syntax. */


# Here is a "key-attribute" peice of CFI grammer:
#
this = "is a test", of_an_option, 0xF, "tough \" \0string\n";
ouch = "";
wow  = Weight_On_Wheels;


-- Here is a peice of CFI grammer called a "section":
--
section_one ("optional parameter")
   {
   // Any legal CFI grammer could be in here, including other sections.
   // Sections can be used to implement hierarchal data.  Notice that sections
   // do not terminate with a semicolon.
   section_two
      {
      string = "\101\a\b\t\n\v\f\r\a\b\f\n\t\v";
      key = "is in a section nested within a section.";
      }
   }


# Words can be all by themselves.
#
DontMoveOff; -- real simple


# Attributes can be integers; these numbers can be specified in four radixes:
# binary, octal, decimal, and hexidecimal.  All integer attributes are "long"
# integers implemented by your C compiler.
#
# NOTE the logic error here; these key all have the same name.  This is not
#      checked by libcfi.  libcfi implements the syntax mechanism; the
#      semantics are left for you to implement.
#
key = 0xDEADFACE; # 32-bit hexidecimal number.
key = -56; # decimal number.
key = 0o0717; # 12-bit octal number.
key = 0b01011111010101010000111110101010; # 32-bit binary number.
key = 0b0110; # 4-bit binary number.


/*   /* Here is a */
 * block of
 * nested comments.  /* You probably /* */ can nest these 32767 levels deep. */
 */


section_two
   {
   thing = 66.0; -- Here is a real number attribute.  It is a "double precision"
                 -- float implemented by your C compiler.
   attribute = value, "and this";
   section ("(r@zy Attribute")
      {
      NotEmpty;
      ouch { thingy; }
      FIXME(7){}
      }
   }
